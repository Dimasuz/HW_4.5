
# Задание № 1
# Необходимо реализовать пользовательские команды, которые будут выполнять следующие функции:
# p – people – команда, которая спросит номер документа и выведет имя человека, которому он принадлежит;
# s – shelf – команда, которая спросит номер документа и выведет номер полки, на которой он находится;
# Правильно обработайте ситуации, когда пользователь будет вводить несуществующий документ.
# l– list – команда, которая выведет список всех документов в формате passport "2207 876234" "Василий Гупкин";
# a – add – команда, которая добавит новый документ в каталог и в перечень полок, спросив его номер, тип, имя владельца и номер полки, на котором он будет храниться. Корректно обработайте ситуацию, когда пользователь будет пытаться добавить документ на несуществующую полку.
# Внимание: p, s, l, a - это пользовательские команды, а не названия функций. Функции должны иметь выразительное название, передающие её действие.

import copy
from main import logger2
import os

documents = [
        {"type": "passport", "number": "2207 876234", "name": "Василий Гупкин"},
        {"type": "invoice", "number": "11-2", "name": "Геннадий Покемонов"},
        {"type": "insurance", "number": "10006", "name": "Аристарх Павлов"}
      ]

directories = {
        '1': ['2207 876234', '11-2', '5455 028765'],
        '2': ['10006'],
        '3': []
      }

def check_number():
  """функция, которая спросит номер документа, проверит его наличие в базе и номер полки"""
  number = input('Введите номер документа: ')  
  for i in documents:
    if number == i["number"]:      
      for i, num in directories.items():
        if number in num:
          shelf = i      
      return [number, shelf]
  print(f"Номера документа {number} в базе нет. Проверьте номер и повторите запрос.")
 

def check_shelf(shelf):
  """функция, которая проверит существует ли полка с номером shelf"""   
  if shelf in directories.keys():        
    return True
  print("Полки с номером", shelf, "не существует. Уточните номер полки.")
    
  
def doc_number():
  """p – people – команда, которая спросит номер документа и выведет имя человека, которому он принадлежит"""
  print('Хотите знать кому принадлежит документ?')
  doc = check_number()  
  if doc == None:
    return
  for i in documents:
    if doc[0] == i["number"]:
      print('Документ принадлежит -', i["name"])
 
  
def shelf_number():
  """s – shelf – команда, которая спросит номер документа и выведет номер полки, на которой он находится"""
  print('Хотите узнать на какой полке искать документ?')
  doc = check_number()
  if doc == None:
    return
  print('Документ находится на полке -', doc[1])
  
  
def list_doc():
  """l– list – команда, которая выведет список всех документов"""
  print('Список всех документов в базе:')
  for i in documents:
    print(i["type"], f'"{i["number"]}"', f'"{i["name"]}"')


def doc_add():
  """a – add – команда, которая добавит новый документ в каталог и в перечень полок, спросив его номер, тип, имя владельца и номер полки, на котором он будет храниться"""
  print('Добваление документа в каталог.')
  shelf = input('Введите номер полки для хранения документа: ')  
  if check_shelf(shelf) == True:
    type = input('Введите название документа: ')
    number = input('Введите номер документа: ')
    name = input('Введите имя владельца документа: ')
    directories[shelf].append(number)
    documents.append({"type": type, "number": number, "name": name})
    print(f'Документ {number} добавлен в каталог и помещен на полке - {shelf}')
    return [directories, documents]
      

# Задание № 2
# d – delete – команда, которая спросит номер документа и удалит его из каталога и из перечня полок. Предусмотрите сценарий, когда пользователь вводит несуществующий документ;
# m – move – команда, которая спросит номер документа и целевую полку и переместит его с текущей полки на целевую. Корректно обработайте кейсы, когда пользователь пытается переместить несуществующий документ или переместить документ на несуществующую полку;
# as – add shelf – команда, которая спросит номер новой полки и добавит ее в перечень. Предусмотрите случай, когда пользователь добавляет полку, которая уже существует.;

def doc_del():
  """d – delete – команда, которая спросит номер документа и удалит его из каталога и из перечня полок"""
  print('Удаление документа из каталога.')
  doc = check_number()
  if doc != None:
    documents_copy = documents.copy()
    for i in range(len(documents_copy)):
      if doc[0] == documents_copy[i]["number"]:
        del documents[i] 
    directories[doc[1]].remove(doc[0])      
    print("Документ", doc[0], "удален из каталога и изъят с полки", doc[1])
    return [directories, documents]
  

def doc_move():
  """m – move – команда, которая спросит номер документа и целевую полку и переместит его с текущей полки на целевую"""
  print('Хотите переложить документ на другую полку?')
  doc = check_number()
  if doc != None:
    print("Документ с номером", doc[0], "находится на полке", doc[1])
    shelf_new = input('Введите номер полки, куда надо переместить этот документ: ')    
    if check_shelf(shelf_new) == True and doc != None:
      directories[doc[1]].remove(doc[0])     
      directories[shelf_new].append(doc[0])
      print("Документ", doc[0], "перемещен с полки", doc[1], "на полку", shelf_new)
      return directories


def doc_as():
  """as - add shelf – команда, которая спросит номер новой полки и добавит ее в перечень"""
  shelf_new = input('Введите номер полки, которую надо добавить: ')  
  if shelf_new in directories.keys():
    print("Полка с номером", shelf_new, "уже существует. Уточните номер полки.")
    return
  directories[shelf_new] = []
  print(f'Полка с номером {shelf_new} добавлена')
  return directories

path = os.path.join(os.path.join(os.getcwd(), 'fold'), 'file_exit.txt')
@logger2(path)
def commander():
  """выполнение пользовательских комманд"""
  print('''Список команд:
p - команда, которая спросит номер документа и выведет имя человека, которому он принадлежит;
s - команда, которая спросит номер документа и выведет номер полки, на которой он находится;
l - команда, которая выведет список всех документов;
a – команда, которая добавит новый документ в каталог и в перечень полок, спросив его номер, тип, имя владельца и номер полки, на котором он будет храниться;
d – команда, которая спросит номер документа и удалит его из каталога и из перечня полок;
m – команда, которая спросит номер документа и целевую полку и переместит его с текущей полки на целевую;
as – команда, которая спросит номер новой полки и добавит ее в перечень
n - выход из программы.''')
  while True: 
    print()
    command_ = input('Введите команду: ').lower()
    if command_ == 'p':
      doc_number()
    elif command_ == 's':
      shelf_number()
    elif command_ == 'l':
      list_doc()
    elif command_ == 'a':
      doc_add()
    elif command_ == 'd':
      doc_del()
    elif command_ == 'm':
      doc_move()
    elif command_ == 'as':
      doc_as() 
    elif command_ == 'n':
      break
    elif command_ == 'pr':
      print('directories =', directories)  
      print('documents =', documents)
    else:
      print('Неверная команда. Если хотите выйти введите - n')
  print('До свидания!')


commander()

